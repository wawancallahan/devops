name: on commit Deploy Service/Web App

on:
  workflow_call:
    inputs:
      service_name:
        description: 'Name of service/web app'
        required: false
        type: string
    secrets:
      cr_username:
        required: true
      cr_token:
        required: true
      mantichor_client_id:
        required: true
      mantichor_client_token:
        required: true
      mantichor_url:
        required: true
      portainer_url:
        required: true
      portainer_key:
        required: true

env:
  SERVICE_NAME: ${{ inputs.service_name || github.event.repository.name  }}

jobs:

  define:
    runs-on: [self-hosted]

    outputs:
      targetEnv: ${{ steps.targetEnv.outputs.value }}

    steps:
      - id: targetEnv
        run: |
          if ${{endsWith(github.event.ref, 'staging')}}
          then
            echo "value=staging" >> $GITHUB_OUTPUT
            echo "::notice title=targetEnv::staging"
          else
            echo "value=dev" >> $GITHUB_OUTPUT
            echo "::notice title=targetEnv::development"
          fi    
          
      - name: Check Branch
        run : echo "::notice title=branch::${{ github.event.base_ref }}"

  metadata:
    needs: [define]
    runs-on: [self-hosted]

    outputs:
      manifest: ${{ steps.mantichor-agent.outputs.manifest }}

    steps:
      - name: Fetch Deploy Property
        id: mantichor-agent 
        uses: mantichor/agent@latest
        env:
          mantichor_client_id: ${{secrets.mantichor_client_id}}
          mantichor_client_token: ${{secrets.mantichor_client_token}}
          mantichor_url: ${{secrets.mantichor_url}}
          step: deploy
          service_name: ${{ env.SERVICE_NAME }}
          target_env: ${{ needs.define.outputs.targetEnv }}
          
      - name: debug mainfest outputs
        run: echo ${{ steps.mantichor-agent.outputs.manifest }}

  swarm-deploy:
    needs: [metadata, define]
    runs-on: [self-hosted]

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.cr_username }} 
          password: ${{ secrets.cr_token }}

      - name: Debug Manifest
        run: echo "::notice title=manifest::${{ needs.metadata.outputs.manifest }}"

      - name: Set output using commit SHA
        id: vars
        run: echo "tag=dev.${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Portainer
        uses: mantichor/portainer-action@latest
        env:
          service_name: ${{ env.SERVICE_NAME }}
          service_manifest: ${{ needs.metadata.outputs.manifest }}
          portainer_url: ${{ secrets.portainer_url }}
          portainer_key: ${{ secrets.portainer_key }}
          commit_tag: ${{ steps.vars.outputs.tag }}
          registry_id: 2
